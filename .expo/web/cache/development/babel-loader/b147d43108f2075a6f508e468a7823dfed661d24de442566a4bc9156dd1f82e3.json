{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Constants from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport StoreReview from \"./ExpoStoreReview\";\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return StoreReview.isAvailableAsync();\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function requestReview() {\n  return _requestReview.apply(this, arguments);\n}\nfunction _requestReview() {\n  _requestReview = _asyncToGenerator(function* () {\n    if (StoreReview != null && StoreReview.requestReview) {\n      yield StoreReview.requestReview();\n      return;\n    }\n    var url = storeUrl();\n    if (url) {\n      var supported = yield Linking.canOpenURL(url);\n      if (!supported) {\n        console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        yield Linking.openURL(url);\n      }\n    } else {\n      console.warn(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n    }\n  });\n  return _requestReview.apply(this, arguments);\n}\nexport function storeUrl() {\n  var _manifest2$extra, _manifest2$extra$expo, _manifest2$extra2, _manifest2$extra2$exp;\n  var manifest = Constants.manifest,\n    manifest2 = Constants.manifest2;\n  if (Platform.OS === 'ios' && manifest != null && manifest.ios) {\n    var _manifest$ios$appStor;\n    return (_manifest$ios$appStor = manifest.ios.appStoreUrl) != null ? _manifest$ios$appStor : null;\n  } else if (Platform.OS === 'ios' && manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoClient) != null && _manifest2$extra$expo.ios) {\n    var _manifest2$extra$expo2;\n    return (_manifest2$extra$expo2 = manifest2.extra.expoClient.ios.appStoreUrl) != null ? _manifest2$extra$expo2 : null;\n  } else if (Platform.OS === 'android' && manifest != null && manifest.android) {\n    var _manifest$android$pla;\n    return (_manifest$android$pla = manifest.android.playStoreUrl) != null ? _manifest$android$pla : null;\n  } else if (Platform.OS === 'android' && manifest2 != null && (_manifest2$extra2 = manifest2.extra) != null && (_manifest2$extra2$exp = _manifest2$extra2.expoClient) != null && _manifest2$extra2$exp.android) {\n    var _manifest2$extra$expo3;\n    return (_manifest2$extra$expo3 = manifest2.extra.expoClient.android.playStoreUrl) != null ? _manifest2$extra$expo3 : null;\n  }\n  return null;\n}\nexport function hasAction() {\n  return _hasAction.apply(this, arguments);\n}\nfunction _hasAction() {\n  _hasAction = _asyncToGenerator(function* () {\n    return !!storeUrl() || (yield isAvailableAsync());\n  });\n  return _hasAction.apply(this, arguments);\n}","map":{"version":3,"names":["Constants","Linking","Platform","StoreReview","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","requestReview","_requestReview","url","storeUrl","supported","canOpenURL","console","warn","openURL","_manifest2$extra","_manifest2$extra$expo","_manifest2$extra2","_manifest2$extra2$exp","manifest","manifest2","OS","ios","_manifest$ios$appStor","appStoreUrl","extra","expoClient","_manifest2$extra$expo2","android","_manifest$android$pla","playStoreUrl","_manifest2$extra$expo3","hasAction","_hasAction"],"sources":["/Users/shubh/Documents/attendance_app/node_modules/expo-store-review/src/StoreReview.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\n\nimport StoreReview from './ExpoStoreReview';\n\n// @needsAudit\n/**\n * Determines if the platform has the capabilities to use `StoreReview.requestReview()`.\n * @return\n * This returns a promise fulfills with `boolean`, depending on the platform:\n * - On iOS, it will resolve to `true` if the device is running iOS 10.3+.\n * - On Android, it will resolve to `true` if the device is running Android 5.0+.\n * - On Web, it will resolve to `false`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return StoreReview.isAvailableAsync();\n}\n\n// @needsAudit\n/**\n * In ideal circumstances this will open a native modal and allow the user to select a star rating\n * that will then be applied to the App Store, without leaving the app. If the device is running\n * a version of iOS lower than 10.3, or a version of Android lower than 5.0, this will attempt\n * to get the store URL and link the user to it.\n */\nexport async function requestReview(): Promise<void> {\n  if (StoreReview?.requestReview) {\n    await StoreReview.requestReview();\n    return;\n  }\n  // If StoreReview is unavailable then get the store URL from `app.config.js` or `app.json` and open the store\n  const url = storeUrl();\n  if (url) {\n    const supported = await Linking.canOpenURL(url);\n    if (!supported) {\n      console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n    } else {\n      await Linking.openURL(url);\n    }\n  } else {\n    // If the store URL is missing, let the dev know.\n    console.warn(\n      \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n    );\n  }\n}\n\n// @needsAudit\n/**\n * This uses the `Constants` API to get the `Constants.manifest.ios.appStoreUrl` on iOS, or the\n * `Constants.manifest.android.playStoreUrl` on Android.\n *\n * On Web this will return `null`.\n */\nexport function storeUrl(): string | null {\n  const { manifest, manifest2 } = Constants;\n  if (Platform.OS === 'ios' && manifest?.ios) {\n    return manifest.ios.appStoreUrl ?? null;\n  } else if (Platform.OS === 'ios' && manifest2?.extra?.expoClient?.ios) {\n    return manifest2.extra.expoClient.ios.appStoreUrl ?? null;\n  } else if (Platform.OS === 'android' && manifest?.android) {\n    return manifest.android.playStoreUrl ?? null;\n  } else if (Platform.OS === 'android' && manifest2?.extra?.expoClient?.android) {\n    return manifest2.extra.expoClient.android.playStoreUrl ?? null;\n  }\n  return null;\n}\n\n// @needsAudit\n/**\n * @return This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable\n * directing the user to some kind of store review flow. If the app config (`app.json`) does not\n * contain store URLs and native store review capabilities are not available then the promise\n * will fulfill to `false`.\n *\n * @example\n * ```ts\n * if (await StoreReview.hasAction()) {\n *   // you can call StoreReview.requestReview()\n * }\n * ```\n */\nexport async function hasAction(): Promise<boolean> {\n  return !!storeUrl() || (await isAvailableAsync());\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}